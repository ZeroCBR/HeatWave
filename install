#!/bin/bash
bold='\e[1;36m'
info='\e[0;36m'
error='\e[1;31m'
NC='\e[0m'

# It is crucial that the initial admin account is removed or changed
# before going live, as it is a major security vulnerability!
ADMIN_EMAIL='heatwaveorange@gmail.com'
ADMIN_PASSWORD='heatwaveorange1234'

echo -e "${info}ADMIN_EMAIL = $ADMIN_EMAIL${NC}"
echo -e "${info}ADMIN_PASSWORD = [HIDDEN]${NC}"

# Install dependencies
echo
echo -e "${bold}Installing core build tools, Ruby, Sqlite3, and Node.js...${NC}"

if `command -v yum 2>&1 >/dev/null`; then
    echo '... using yum'
    sudo yum install ruby || exit -1
    sudo yum install gcc g++ make automake autoconf curl-devel openssl-devel \
        zlib-devel httpd-devel apr-devel apr-util-devel sqlite-devel || exit -1
    sudo yum install ruby-rdoc ruby-devel || exit -1
    sudo yum install rubygems || exit -1
    sudo curl --silent --location https://rpm.nodesource.com/setup | sudo bash - \
        || exit -1
    sudo yum install nodejs || exit -1
elif `command -v pacman 2>&1 >/dev/null`; then
    echo '... using pacman'
    if `command -v sudo 2>&1 >/dev/null`; then
        echo '... using sudo'
        sudo pacman -S ruby || exit -1
        sudo pacman -S sqlite || exit -1
        sudo pacman -S nodejs || exit -1
        sudo pacman -S gcc || exit -1
    else
        echo '... not using sudo'
        if [[ -n "$WD" ]]; then
            echo -e "${info}Windows environment detected${NC}"
            if `command -v ruby 2>&1 >/dev/null`; then
                echo -e "${info}Windows Ruby installation detected${NC}"
            else
                echo -e "\
${error}You seem to be using windows.
Please install Ruby using RubyInstaller from http://rubyinstaller.org
as per the instructions in the project README.${NC}\
"
                exit -1
            fi
            if `command -v node 2>&1 >/dev/null`; then
                echo -e "${info}Windows Node.js installation detected${NC}"
            else
                echo -e "\
${error}You seem to be using windows.
Please install Node.js using the installer from https://nodejs.org/
as per the instructions in the project README.${NC}\
"
                exit -1
            fi
            # On a 32bit windows system, this won't work.
            # Since 32 windows is not our main target,
            # you'll need to find an alternative yourself.
            pacman -S mingw64/mingw-w64-x86_64-gcc
        else
            pacman -S ruby || exit -1
            pacman -S nodejs || exit -1
            pacman -S gcc || exit -1
        fi
        pacman -S sqlite || exit -1
    fi
elif `command -v apt-get 2>&1 >/dev/null`; then
    echo -e '... using apt-get'
    sudo apt-get update || exit -1
    sudo apt-get install build-essential git-core curl sqlite3 libsqlite3-dev \
        libxml2-dev libxslt1-dev libreadline-dev libyaml-dev \
        libcurl4-openssl-dev libncurses5-dev libgdbm-dev libffi-dev || exit -1
    sudo apt-get install ruby ruby-dev || exit -1
    sudo apt-get install rubygems || exit -1
    curl --silent --location https://deb.nodesource.com/setup_0.12 | sudo bash - \
        || exit -1
    sudo apt-get install nodejs || exit -1
else
    echo "${error}\
This application depends on the presence of yum, pacman, or apt-get.
If a suitable alternative package manager is available, please examine
this script and edit it to use the alternative.${NC}\
"
    exit -1
fi

echo
echo -e "${bold}Core build tools, Ruby, Sqlite3, and Node.js installed.${NC}"

echo
echo -e "${bold}Updating Rubygems...${NC}"

if `command -v sudo 2>&1 >/dev/null`; then
    echo '... using sudo'
    sudo gem update --system || exit -1
else
    echo '... not using sudo'
    gem update --system || exit -1
fi

echo
echo -e "${bold}Rubygems updated.${NC}"

if [[ -z "$WD" ]]; then
    echo
    echo -e "${bold}Setting rubygems home${NC}"
    if [[ "$(type ruby)" ]]; then
        PATH="$PATH:$(ruby -rubygems -e 'puts Gem.user_dir')/bin"
    fi
    export GEM_HOME="$(ruby -rubygems -e 'puts Gem.user_dir')"
    echo
    echo -e "${info}GEM_HOME=$GEM_HOME${NC}"
fi

echo
echo -e "${bold}Installing bundle${NC}"
gem install bundle || exit -1
echo
echo -e "${bold}bundle installed.${NC}"

# Configure paths.
export RAILS_HOME="$PWD/heatwave"
export PULLER_HOME="$PWD/puller"
export MESSENGER_HOME="$PWD/messenger"
export SENDER_HOME="$PWD/sms_sender"

echo
echo -e "${bold}Loading configuration${NC}"
if [[ -e ~/.heatwave.conf ]]; then
    echo -e "${info}from $HOME/.heatwave.conf${NC}"
    source "$HOME/.heatwave.conf"
elif [[ -e /usr/local/etc/heatwave.conf ]]; then
    echo -e "${info}from /usr/local/etc/.heatwave.conf${NC}"
    source /usr/local/etc/heatwave.conf
elif [[ -e /usr/etc/heatwave.conf ]]; then
    echo -e "${info}from /usr/etc/.heatwave.conf${NC}"
    source /usr/etc/heatwave.conf
elif [[ -e /etc/heatwave.conf ]]; then
    echo -e "${info}from /etc/.heatwave.conf${NC}"
    source /etc/heatwave.conf
else
    echo -e "using defaults relative to ${PWD}"
fi

echo -e "${info}RAILS_HOME=${RAILS_HOME}${NC}"
echo -e "${info}PULLER_HOME=${PULLER_HOME}${NC}"
echo -e "${info}MESSENGER_HOME=${MESSENGER_HOME}${NC}"
echo -e "${info}SENDER_HOME=${SENDER_HOME}${NC}"

# Set up components.

echo
echo -e "${bold}Installing the Heatwave SMS sender...${NC}"
cd "$SENDER_HOME"
bundle install --path ../vendor || exit -1
bundle exec rake install || exit -1
echo
echo -e "${bold}Heatwave SMS sender installed.${NC}"

echo
echo -e "${bold}Installing the Heatwave data puller...${NC}"
cd "$PULLER_HOME"
bundle install --path ../vendor || exit -1
bundle exec rake install || exit -1
bundle exec rake db:migrate:reset || exit -1
echo
echo -e "${bold}Heatwave data puller installed.${NC}"

echo
echo -e "${bold}Installing the Heatwave messenger...${NC}"
cd "$MESSENGER_HOME"
bundle install --path ../vendor || exit -1
bundle exec rake install || exit -1
bundle exec rake db:migrate:reset || exit -1
echo
echo -e "${bold}Heatwave messenger installed.${NC}"

echo
echo -e "${bold}Installing the Heatwave rails application...${NC}"
cd "$RAILS_HOME"
bundle install --path ../vendor || exit -1
bundle exec rake db:migrate:reset || exit -1
RAILS_ENV=production bundle exec rake db:migrate:reset || exit -1
ADMIN_EMAIL=$ADMIN_EMAIL ADMIN_PASSWORD=$ADMIN_PASSWORD\
    RAILS_ENV=production bundle exec rake db:seed || exit -1
RAILS_ENV=production bundle exec rake assets:clean assets:precompile || exit -1
echo
echo -e "${bold}Heatwave rails application installed.${NC}"
