require 'active_record_migrations'
require 'bundler/gem_tasks'
require 'rspec/core/rake_task'
require 'rubocop/rake_task'
require 'rdoc/task'
require 'messenger'

# Default to validation
task default: :validate

# Testing framework
RSpec::Core::RakeTask.new(:spec)

# Linter
RuboCop::RakeTask.new(:rubocop) do |task|
  task.options = ['-D']
end

namespace :db do
  namespace :test do
    task :reset do
      `rake db:migrate:reset RAILS_ENV=test`
    end
    task reset: :'db:test'
  end

  task :test do
    ENV['DATABASE_ENV'] = 'test'
  end
end

namespace :test do
  ##
  # Fast tests are generally ones which don't require a network.
  RSpec::Core::RakeTask.new(:fast) do |task|
    task.rspec_opts = '--tag ~speed:slow'
  end

  ##
  # TODO
  task :acceptance do
    message_1 = {
      user: {
        messages_type: 'phone',
        phone:         '0400400269'
      },
      contents: 'Messenger Acceptance Testing' }
    message_2 = {
      user: {
        messages_type: 'email',
        email:         'jmcma@stident.unimelb.edu.au'
      },
      contents: 'Messenger Acceptance Testing' }

    messages = [message_1, message_2]
    Messenger.send_messages(messages)
  end
end

task spec: :'db:test:reset' # Always reset the test db before specs
task test: :spec # Run all tests for this gem.

# Validation runs tests and the linter.
task validate: :test
task validate: :rubocop

# Rdoc produces documentation for this gem.
RDoc::Task.new :rdoc do |task|
  task.main = 'README.md'
  task.rdoc_files.include('README.md', 'lib/**/*.rb')
end

# Add ActiveRecord migration tasks without Rails.
ActiveRecordMigrations.configure do |config|
  # Copy the migrations from the rails app.
  config.migrations_paths = ["#{Messenger::Database::RAILS_HOME}/db/migrate"]
  config.database_configuration = Messenger::Database::DATABASE_CONFIG
end

ActiveRecordMigrations.load_tasks
