require 'active_record_migrations'
require 'bundler/gem_tasks'
require 'rspec/core/rake_task'
require 'rubocop/rake_task'
require 'rdoc/task'
require 'messenger'

# Default to validation
task default: :validate

# Testing framework
RSpec::Core::RakeTask.new(:spec)

# Linter
RuboCop::RakeTask.new(:rubocop) do |task|
  task.options = ['-D']
end

namespace :db do
  namespace :test do
    task :reset do
      `rake db:migrate:reset RAILS_ENV=test`
    end
    task reset: :'db:test'
  end

  task :test do
    ENV['DATABASE_ENV'] = 'test'
  end
end

namespace :test do
  ##
  # Fast tests are generally ones which don't require a network.
  RSpec::Core::RakeTask.new(:fast) do |task|
    task.rspec_opts = '--tag ~speed:slow'
  end

  ##
  # sends example messages to James' phone and uni email
  task :acceptance do
    puts 'Running example scenario with two users in Mildura on a hot day'

    Messenger::Database.initialise('test' || 'production')
    puts 'Adding a rule: '

    p easy_rule = Rule.find_or_create_by(
      name: 'This rule is almost guaranteed to cause a heatwave',
      key_advice: 'Hello, this is a test message from HeatWave',
      full_advice: 'full advice text',
      activated: true,
      duration: 1,
      delta: 1)
    puts ''
    puts 'Adding a location: '
    p mildura = Location.find_or_create_by(
      name: 'MILDURA RACECOURSE',
      jan_mean: 1, feb_mean: 2, mar_mean: 1, apr_mean: 1,
      may_mean: 4, jun_mean: 1, jul_mean: 1, aug_mean: 1,
      sep_mean: 1, oct_mean: 1, nov_mean: 2, dec_mean: 2)
    puts ''
    puts 'Adding today\'s weather for the location: '
    p Weather.find_or_create_by(location: mildura,
                     date: Date.today,
                     high_temp: 100)
    puts ''
    puts 'Adding tomorrow\'s weather for the location: '
    p Weather.find_or_create_by(location: mildura,
                     date: Date.today + 1.day,
                     high_temp: 100)
    puts ''
    puts 'Adding the next day\'s weather for the location: '
    p Weather.find_or_create_by(location: mildura,
                     date: Date.today + 2.day,
                     high_temp: 100)
    puts ''
    
    puts 'Adding a phone user'
    p alice = User.find_or_create_by(
      email: 'asanchez@mail.com',
      encrypted_password: '12345678910',
      f_name: 'Alice',
      l_name: 'Sanchez',
      gender: 'F',
      age: 19,
      phone: '0400400269',
      message_type: 'phone',
      location: mildura)
    puts ''
    puts 'Adding an email user'
    p bob = User.find_or_create_by(
      email: 'jmcma@student.unimelb.edu.au',
      encrypted_password: '12345678910',
      f_name: 'Bob',
      l_name: 'Roberts',
      gender: 'M',
      age: 28,
      message_type: 'email',
      location: mildura)
    alice.save!
    bob.save!

    puts ''
    puts 'Generating messages'
    p messages = Messenger.retrieve_messages

    puts ''
    puts 'Sending ' + messages.size.to_s + ' messages with... '
    errors = Messenger.send_messages(messages)
    puts errors.to_s
    puts errors.size.to_s + ' errors'
  end
end

task spec: :'db:test:reset' # Always reset the test db before specs
task test: :spec # Run all tests for this gem.

# Validation runs tests and the linter.
task validate: :test
task validate: :rubocop

# Rdoc produces documentation for this gem.
RDoc::Task.new :rdoc do |task|
  task.main = 'README.md'
  task.rdoc_files.include('README.md', 'lib/**/*.rb')
end

# Add ActiveRecord migration tasks without Rails.
ActiveRecordMigrations.configure do |config|
  # Copy the migrations from the rails app.
  config.migrations_paths = ["#{Messenger::Database::RAILS_HOME}/db/migrate"]
  config.database_configuration = Messenger::Database::DATABASE_CONFIG
end

ActiveRecordMigrations.load_tasks
