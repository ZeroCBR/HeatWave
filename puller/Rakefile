require 'active_record_migrations'
require 'bundler/gem_tasks'
require 'rspec/core/rake_task'
require 'rubocop/rake_task'
require 'rdoc/task'

# Default to validation
task default: :validate

# Testing framework
RSpec::Core::RakeTask.new(:spec)

# Linter
RuboCop::RakeTask.new(:rubocop) do |task|
  task.options = ['-D']
end

namespace :db do
  namespace :test do
    task :reset do
      `rake db:reset RAILS_ENV=test`
    end
    task reset: :'db:test'
  end

  task :test do
    ENV['DATABASE_ENV'] = 'test'
  end
end

namespace :test do
  ##
  # Fast tests are generally ones which don't require a network.
  RSpec::Core::RakeTask.new(:fast) do |task|
    task.rspec_opts = '--tag ~speed:slow'
  end
  namespace :acceptance do
    ##
    # The acceptance test just produces a human readable version
    # of the current weather data.
    task :weather do
      require 'puller'
      Puller::Database.initialise(ENV['DATABASE_ENV'] || 'production')
      Puller::ModelMarshaler.weather_model = Weather
      Puller::ModelMarshaler.location_model = Location

      pipeline = { getter: Puller::Getter,
                   processor: Puller::Processor,
                   marshaler: Puller::ModelMarshaler }

      count = Puller.pull_from(Puller::DEFAULT_SOURCE, pipeline)
      puts "Pulled #{count} weather records."
      puts
      puts 'Current weather database contents:'
      puts
      puts '|    Date    | High | Location'
      puts '|------------|------|-----------------------------'
      Weather.all.each do |w|
        format_string = \
          "| #{w.date.strftime('%a %d %b')} | %2d*C | #{w.location.name}"
        puts format format_string, w.high_temp
      end
      puts
      puts "Total weather records: #{Weather.count}"
    end

    ##
    # The acceptance test just produces a human readable version
    # of the current weather data.
    task :location do
      require 'puller'
      Puller::Database.initialise(ENV['DATABASE_ENV'] || 'production')
      Puller::ModelMarshaler.weather_model = Weather
      Puller::ModelMarshaler.location_model = Location
      Puller::Location::ModelMarshaler.location_model = Location

      pipeline = { getter: Puller::Getter,
                   processor: Puller::Processor,
                   marshaler: Puller::ModelMarshaler }
      location_pipeline = { getter: Puller::Location::Getter,
                            processor: Puller::Location::Processor,
                            marshaler: Puller::Location::ModelMarshaler }
      location_puller = Puller::Simple.new(location_pipeline)
      pipeline[:marshaler] = Puller::Location::Looper.new(location_puller)

      count = Puller.pull_from(Puller::DEFAULT_SOURCE, pipeline)
      puts "Pulled #{count} location records."
      puts
      puts 'Current location database contents:'
      puts
      puts '| ID     | Jan  | Jul  | Name'
      puts '|--------|------|------|----------------------------'
      Location.all.each do |l|
        format_string = '| %06d | %4.1f | %4.1f | %s'
        puts format format_string, l.id, l.jan_mean, l.jul_mean, l.name
      end
      puts
      puts "Total location records: #{Location.count}"
    end
  end

  task acceptance: :'acceptance:location'
  task acceptance: :'acceptance:weather'
end

task spec: :'db:test:reset' # Always reset the test db before specs
task test: :spec # Run all tests for this gem.

# Validation runs tests and the linter.
task validate: :test
task validate: :rubocop

# Rdoc produces documentation for this gem.
RDoc::Task.new :rdoc do |task|
  task.main = 'README.md'
  task.rdoc_files.include('README.md', 'lib/**/*.rb')
end

# Add ActiveRecord migration tasks without Rails.
ActiveRecordMigrations.configure do |config|
  require_relative 'lib/puller/database'
  # Copy the migrations from the rails app.
  config.migrations_paths = ["#{Puller::Database::RAILS_HOME}/db/migrate"]
  config.database_configuration = Puller::Database::DATABASE_CONFIG
end

ActiveRecordMigrations.load_tasks
