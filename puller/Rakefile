require 'active_record_migrations'
require 'bundler/gem_tasks'
require 'rspec/core/rake_task'
require 'rubocop/rake_task'
require 'rdoc/task'

# Default to validation
task default: :validate

# Testing framework
RSpec::Core::RakeTask.new(:spec)

# Linter
RuboCop::RakeTask.new(:rubocop) do |task|
  task.options = ['-D']
end

namespace :db do
  namespace :test do
    task :reset do
      system('rake db:reset RAILS_ENV=test')
    end
    task reset: :'db:test'
  end

  task :test do
    ENV['DATABASE_ENV'] = 'test'
  end
end

namespace :test do
  ##
  # Fast tests are generally ones which don't require a network.
  RSpec::Core::RakeTask.new(:fast) do |task|
    task.rspec_opts = '--tag ~speed:slow'
  end

  ##
  # The acceptance test just produces a human readable version
  # of the current weather data.
  task :acceptance do
    require 'puller'
    Puller::Database.initialise(ENV['DATABASE_ENV'] || 'production')
    Puller::ModelMarshaler.weather_model = Weather
    Puller::ModelMarshaler.location_model = Location

    source = { hostname: 'ftp2.bom.gov.au',
               filename: '/anon/gen/fwo/IDA00003.dat',
               user: 'ftp',
               passwd: '' }

    pipeline = { getter: Puller::Getter,
                 processor: Puller::Processor,
                 marshaler: Puller::ModelMarshaler }

    puts "Pulled #{Puller.pull_from(source, pipeline)} weather records."
    puts
    puts 'Current weather database contents:'
    puts
    puts '|    Date    | High | Location'
    puts '|------------|------|-----------------------------'
    Weather.all.each do |w|
      puts "| #{w.date.strftime('%a %d %b')} "\
           "| #{w.high_temp}*C | #{w.location.name}"
    end
    puts
    puts "Total weather records: #{Weather.count}"
  end
end

task spec: :'db:test:reset' # Always reset the test db before specs
task test: :spec # Run all tests for this gem.

# Validation runs tests and the linter.
task validate: :test
task validate: :rubocop

# Rdoc produces documentation for this gem.
RDoc::Task.new :rdoc do |task|
  task.main = 'README.md'
  task.rdoc_files.include('README.md', 'lib/**/*.rb')
end

# Add ActiveRecord migration tasks without Rails.
ActiveRecordMigrations.configure do |config|
  require_relative 'lib/puller/database'
  # Copy the migrations from the rails app.
  config.migrations_paths = ["#{Puller::Database::RAILS_HOME}/db/migrate"]
  config.database_configuration = Puller::Database::DATABASE_CONFIG
end

ActiveRecordMigrations.load_tasks
